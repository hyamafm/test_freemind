# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "master" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  workflow_dispatch:

env:
  EC2_REGION: us-west-2

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v2
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: ap-northeast-1

    - name: Set up AWS CLI
      run: |
        # AWS CLIのインストール
        sudo apt-get install awscli -y
        # AWS CLIの設定
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set region us-west-2
        
    - name: Get EC2 instance
      shell: bash
      run: |
        ALB_ARN=`aws elbv2 describe-load-balancers --names=dev-elb-test | jq -r '.LoadBalancers[].LoadBalancerArn'`
        LISTENER_ARN=`aws elbv2 describe-listeners --load-balancer-arn $ALB_ARN | jq -r '.Listeners[] | select(.Port == 443)' | jq -r '.ListenerArn'`
        ACTIVE_TARGET_ARN=`aws elbv2 describe-listeners --load-balancer-arn $ALB_ARN | jq -r '.Listeners[] | select(.Port == 443)' | jq -r '.DefaultActions[].ForwardConfig.TargetGroups[] | select(.Weight == 1)' | jq -r '.TargetGroupArn'`
        ACTIVE_TARGET_INSTANCE_ID=`aws elbv2 describe-target-health --target-group-arn $ACTIVE_TARGET_ARN | jq -r '.TargetHealthDescriptions[].Target.Id'`
        ACTIVE_TARGET_INSTANCE_NAME=$(aws ec2 describe-instances --instance-ids $ACTIVE_TARGET_INSTANCE_ID --query 'Reservations[].Instances[].Tags[?Key==`Name`].Value' --output text | tr -d '\r')
        echo "$ACTIVE_TARGET_INSTANCE_NAME"
        
    - name: Build Docker image
      run: docker image build -t test:latest .
          
    - name: Setup SSH Keys and known_hosts
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"

    - name: Deploy
      run: |
        echo "$ACTIVE_TARGET_INSTANCE_NAME"
        docker run --rm -t \
        -v "$PWD":/data \
        -v /tmp/ssh_agent.sock:/tmp/ssh-agent.sock \
        --env SSH_AUTH_SOCK=/tmp/ssh-agent.sock \
        test dep deploy $ACTIVE_TARGET_INSTANCE_NAME
